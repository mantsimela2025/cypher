# GitLab CI/CD Pipeline for CYPHER Deployment to AWS Windows EC2
# Deploys to Windows Server 2019 EC2 instance with IIS and PM2

stages:
  - test
  - build
  - deploy
  - health-check

variables:
  NODE_VERSION: "18"
  EC2_INSTANCE_ID: "i-04a41343a3f51559a"  # Your Windows Server 2019 instance
  EC2_HOST: "18.207.177.239"  # Replace with your actual EC2 public IP
  EC2_USERNAME: "Administrator"
  AWS_DEFAULT_REGION: "us-east-1"
  S3_BUCKET: "rasdash-deployments"
  S3_DEPLOYMENT_PATH: "CYPHER-DEPLOYMENT"

# Test stage - runs on every push and merge request
test:
  stage: test
  image: node:18-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - api/node_modules/
      - client/node_modules/
  before_script:
    - apk add --no-cache git
    - npm ci
    - cd api && npm ci
    - cd ../client && npm ci
  script:
    - echo "üß™ Running API tests..."
    - cd api && npm run test
    - echo "üèóÔ∏è Building client..."
    - cd ../client && npm run build
  artifacts:
    paths:
      - client/dist/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "master"

# Build stage - creates deployment package
build:
  stage: build
  image: node:18-alpine
  dependencies:
    - test
  before_script:
    - apk add --no-cache zip git
  script:
    - echo "üì¶ Creating deployment package..."
    - mkdir -p deployment
    - cp -r api deployment/
    - cp -r client/dist deployment/client
    - cp package.json deployment/
    - cp ecosystem.config.js deployment/ || echo "ecosystem.config.js not found, skipping"
    - cd deployment && zip -r ../cypher-deployment.zip .
    - echo "‚úÖ Deployment package created"
  artifacts:
    paths:
      - cypher-deployment.zip
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "master"

# Deploy stage - deploys to Windows EC2
deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  dependencies:
    - build
  before_script:
    - yum update -y
    - yum install -y openssh-clients
    - aws --version
  script:
    - echo "üöÄ Starting deployment to Windows EC2..."

    # Upload to S3 with timestamp
    - TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    - echo "üì§ Uploading deployment package to S3..."
    - aws s3 cp cypher-deployment.zip s3://${S3_BUCKET}/${S3_DEPLOYMENT_PATH}/releases/cypher-${TIMESTAMP}.zip
    - aws s3 cp cypher-deployment.zip s3://${S3_BUCKET}/${S3_DEPLOYMENT_PATH}/latest/cypher-latest.zip
    - echo "‚úÖ Deployment uploaded with timestamp: ${TIMESTAMP}"

    # Check and start EC2 instance if needed
    - echo "üîç Checking EC2 instance state..."
    - INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids ${EC2_INSTANCE_ID} --query 'Reservations[0].Instances[0].State.Name' --output text)
    - echo "Current instance state: ${INSTANCE_STATE}"

    - |
      if [ "$INSTANCE_STATE" = "stopped" ]; then
        echo "üöÄ Starting EC2 instance..."
        aws ec2 start-instances --instance-ids ${EC2_INSTANCE_ID}
        echo "‚è≥ Waiting for instance to be running..."
        aws ec2 wait instance-running --instance-ids ${EC2_INSTANCE_ID}
        echo "‚úÖ Instance started successfully"
        echo "‚è≥ Waiting additional 60 seconds for services to initialize..."
        sleep 60
      else
        echo "‚úÖ Instance is already running"
      fi

    # Create PowerShell deployment script
    - |
      cat > deploy-script.ps1 << 'EOF'
      # PowerShell deployment script for CYPHER on Windows Server 2019
      $ErrorActionPreference = "Stop"

      Write-Host "üöÄ Starting CYPHER deployment..." -ForegroundColor Green

      # Set deployment paths
      $AppPath = "C:\inetpub\wwwroot\cypher"
      $BackupPath = "C:\deployments\backups\$(Get-Date -Format 'yyyyMMdd-HHmmss')"
      $TempPath = "C:\deployments\temp"

      # Create directories if they don't exist
      Write-Host "üìÅ Creating deployment directories..." -ForegroundColor Yellow
      New-Item -ItemType Directory -Force -Path $AppPath, $BackupPath, $TempPath | Out-Null

      # Stop PM2 processes gracefully
      Write-Host "‚èπÔ∏è Stopping PM2 processes..." -ForegroundColor Yellow
      try {
          pm2 stop cypher-api 2>$null
          pm2 stop cypher-client 2>$null
          pm2 delete cypher-api 2>$null
          pm2 delete cypher-client 2>$null
      } catch {
          Write-Host "PM2 processes not running or not found" -ForegroundColor Gray
      }

      # Backup current deployment
      if (Test-Path $AppPath) {
          Write-Host "üíæ Creating backup..." -ForegroundColor Yellow
          Copy-Item -Path $AppPath -Destination $BackupPath -Recurse -Force
          Write-Host "‚úÖ Backup created at $BackupPath" -ForegroundColor Green
      }

      # Download latest deployment from S3
      Write-Host "üì• Downloading latest deployment from S3..." -ForegroundColor Yellow
      aws s3 cp s3://rasdash-deployments/CYPHER-DEPLOYMENT/latest/cypher-latest.zip $TempPath\cypher-latest.zip

      # Extract deployment
      Write-Host "üì¶ Extracting deployment package..." -ForegroundColor Yellow
      Expand-Archive -Path $TempPath\cypher-latest.zip -DestinationPath $TempPath\extracted -Force

      # Stop IIS
      Write-Host "‚èπÔ∏è Stopping IIS..." -ForegroundColor Yellow
      iisreset /stop

      # Remove old files (keep web.config if exists)
      Write-Host "üßπ Cleaning old deployment..." -ForegroundColor Yellow
      if (Test-Path $AppPath\web.config) {
          Copy-Item -Path $AppPath\web.config -Destination $TempPath\web.config.backup
      }
      Remove-Item -Path $AppPath\* -Recurse -Force -ErrorAction SilentlyContinue

      # Copy new files
      Write-Host "üìã Copying new files..." -ForegroundColor Yellow
      Copy-Item -Path $TempPath\extracted\* -Destination $AppPath -Recurse -Force

      # Restore web.config if it existed
      if (Test-Path $TempPath\web.config.backup) {
          Copy-Item -Path $TempPath\web.config.backup -Destination $AppPath\web.config -Force
      }

      # Install/update API dependencies
      Write-Host "üì¶ Installing API dependencies..." -ForegroundColor Yellow
      Set-Location $AppPath\api
      npm install --production --silent

      # Create PM2 ecosystem config if it doesn't exist
      if (-not (Test-Path $AppPath\ecosystem.config.js)) {
          Write-Host "üìù Creating PM2 ecosystem config..." -ForegroundColor Yellow
          @"
      module.exports = {
        apps: [
          {
            name: 'cypher-api',
            script: './api/src/server.js',
            cwd: '$AppPath',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            },
            instances: 1,
            exec_mode: 'fork',
            watch: false,
            max_memory_restart: '1G',
            error_file: 'C:/deployments/logs/api-error.log',
            out_file: 'C:/deployments/logs/api-out.log',
            log_file: 'C:/deployments/logs/api-combined.log'
          }
        ]
      };
      "@ | Out-File -FilePath $AppPath\ecosystem.config.js -Encoding UTF8
      }

      # Create logs directory
      New-Item -ItemType Directory -Force -Path "C:\deployments\logs" | Out-Null

      # Start PM2 processes
      Write-Host "üöÄ Starting PM2 processes..." -ForegroundColor Yellow
      Set-Location $AppPath
      pm2 start ecosystem.config.js
      pm2 save

      # Start IIS
      Write-Host "üåê Starting IIS..." -ForegroundColor Yellow
      iisreset /start

      # Cleanup temp files
      Write-Host "üßπ Cleaning up temporary files..." -ForegroundColor Yellow
      Remove-Item -Path $TempPath -Recurse -Force -ErrorAction SilentlyContinue

      Write-Host "‚úÖ CYPHER deployment completed successfully!" -ForegroundColor Green
      Write-Host "üåê Application should be available at: http://localhost" -ForegroundColor Cyan
      Write-Host "üîß API should be available at: http://localhost:3001" -ForegroundColor Cyan
      EOF

    # Deploy to EC2 using SSH
    - echo "üîê Setting up SSH connection..."
    - echo "$EC2_PRIVATE_KEY" > ec2-key.pem
    - chmod 600 ec2-key.pem

    - echo "üì§ Uploading deployment script to EC2..."
    - scp -i ec2-key.pem -o StrictHostKeyChecking=no deploy-script.ps1 ${EC2_USERNAME}@${EC2_HOST}:C:/deployments/

    - echo "üöÄ Executing deployment on EC2..."
    - ssh -i ec2-key.pem -o StrictHostKeyChecking=no ${EC2_USERNAME}@${EC2_HOST} "powershell -ExecutionPolicy Bypass -File C:/deployments/deploy-script.ps1"

    - echo "üßπ Cleaning up local files..."
    - rm -f ec2-key.pem deploy-script.ps1

    - echo "‚úÖ Deployment completed successfully!"

  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "master"

# Health check stage - verifies deployment
health-check:
  stage: health-check
  image: curlimages/curl:latest
  script:
    - echo "‚è≥ Waiting for services to start..."
    - sleep 30

    - echo "üè• Performing health check..."
    - |
      for i in {1..5}; do
        echo "Attempt $i/5..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_HOST}/health || echo "000")
        if [ "$response" = "200" ]; then
          echo "‚úÖ Health check passed!"
          exit 0
        fi
        echo "‚ùå Health check failed with status: $response"
        if [ $i -lt 5 ]; then
          echo "‚è≥ Waiting 10 seconds before retry..."
          sleep 10
        fi
      done
      echo "‚ùå Health check failed after 5 attempts"
      exit 1

  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "master"
