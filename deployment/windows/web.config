<?xml version="1.0" encoding="utf-8"?>
<!--
  IIS Configuration for RAS Dashboard
  This configures IIS to serve the React frontend and reverse proxy API calls to Node.js backend
-->
<configuration>
  <system.webServer>
    
    <!-- Enable URL Rewrite Module -->
    <rewrite>
      <rules>
        
        <!-- Rule 1: API Proxy - Route /api/* requests to IISNode API application -->
        <rule name="API Proxy" stopProcessing="true">
          <match url="^api/(.*)" />
          <action type="Rewrite" url="/api/api/{R:1}" />
          <serverVariables>
            <set name="HTTP_X_ORIGINAL_ACCEPT_ENCODING" value="{HTTP_ACCEPT_ENCODING}" />
            <set name="HTTP_X_FORWARDED_FOR" value="{REMOTE_ADDR}" />
            <set name="HTTP_X_FORWARDED_PROTO" value="{HTTPS:^OFF$:http:https}" />
            <set name="HTTP_X_FORWARDED_HOST" value="{HTTP_HOST}" />
          </serverVariables>
        </rule>
        
        <!-- Rule 2: Health Check Route -->
        <rule name="Health Proxy" stopProcessing="true">
          <match url="^health$" />
          <action type="Rewrite" url="/api/health" />
          <serverVariables>
            <set name="HTTP_X_FORWARDED_FOR" value="{REMOTE_ADDR}" />
            <set name="HTTP_X_FORWARDED_PROTO" value="{HTTPS:^OFF$:http:https}" />
            <set name="HTTP_X_FORWARDED_HOST" value="{HTTP_HOST}" />
          </serverVariables>
        </rule>
        
        <!-- Rule 3: API Docs Route -->
        <rule name="API Docs Proxy" stopProcessing="true">
          <match url="^api-docs(.*)$" />
          <action type="Rewrite" url="/api/api-docs{R:1}" />
          <serverVariables>
            <set name="HTTP_X_FORWARDED_FOR" value="{REMOTE_ADDR}" />
            <set name="HTTP_X_FORWARDED_PROTO" value="{HTTPS:^OFF$:http:https}" />
            <set name="HTTP_X_FORWARDED_HOST" value="{HTTP_HOST}" />
          </serverVariables>
        </rule>
        
        <!-- Rule 4: WebSocket Support (future) - Route to API application -->
        <rule name="WebSocket Proxy" stopProcessing="true">
          <match url="^ws/(.*)" />
          <action type="Rewrite" url="/api/ws/{R:1}" />
          <serverVariables>
            <set name="HTTP_X_FORWARDED_FOR" value="{REMOTE_ADDR}" />
            <set name="HTTP_X_FORWARDED_PROTO" value="{HTTPS:^OFF$:http:https}" />
            <set name="HTTP_X_FORWARDED_HOST" value="{HTTP_HOST}" />
          </serverVariables>
        </rule>
        
        <!-- Rule 5: React Router - Handle client-side routing -->
        <rule name="React Router" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
            <add input="{REQUEST_URI}" pattern="^/(api|health|api-docs|ws)" negate="true" />
          </conditions>
          <action type="Rewrite" url="/index.html" />
        </rule>
        
      </rules>
      
      <!-- Outbound rules for response headers -->
      <outboundRules>
        <rule name="Add CORS Headers" preCondition="IsAPIResponse">
          <match serverVariable="RESPONSE_Access_Control_Allow_Origin" pattern=".*" />
          <action type="Rewrite" value="*" />
        </rule>
        <rule name="Add CORS Methods" preCondition="IsAPIResponse">
          <match serverVariable="RESPONSE_Access_Control_Allow_Methods" pattern=".*" />
          <action type="Rewrite" value="GET, POST, PUT, DELETE, OPTIONS" />
        </rule>
        <rule name="Add CORS Headers List" preCondition="IsAPIResponse">
          <match serverVariable="RESPONSE_Access_Control_Allow_Headers" pattern=".*" />
          <action type="Rewrite" value="Content-Type, Authorization, X-Requested-With" />
        </rule>
        <preConditions>
          <preCondition name="IsAPIResponse">
            <add input="{URL}" pattern="^/(api|health|api-docs)" />
          </preCondition>
        </preConditions>
      </outboundRules>
      
    </rewrite>
    
    <!-- Default document -->
    <defaultDocument>
      <files>
        <clear />
        <add value="index.html" />
      </files>
    </defaultDocument>
    
    <!-- Static content handling -->
    <staticContent>
      <!-- Set proper MIME types -->
      <mimeMap fileExtension=".json" mimeType="application/json" />
      <mimeMap fileExtension=".js" mimeType="application/javascript" />
      <mimeMap fileExtension=".css" mimeType="text/css" />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
      <mimeMap fileExtension=".woff" mimeType="font/woff" />
      <mimeMap fileExtension=".woff2" mimeType="font/woff2" />
      <mimeMap fileExtension=".ttf" mimeType="font/ttf" />
      <mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" />
      
      <!-- Enable compression -->
      <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="30.00:00:00" />
    </staticContent>
    
    <!-- Compression settings -->
    <httpCompression>
      <dynamicTypes>
        <add mimeType="application/json" enabled="true" />
        <add mimeType="application/javascript" enabled="true" />
        <add mimeType="text/css" enabled="true" />
        <add mimeType="text/html" enabled="true" />
      </dynamicTypes>
      <staticTypes>
        <add mimeType="application/javascript" enabled="true" />
        <add mimeType="text/css" enabled="true" />
        <add mimeType="text/html" enabled="true" />
      </staticTypes>
    </httpCompression>
    
    <!-- Security headers -->
    <httpProtocol>
      <customHeaders>
        <add name="X-Content-Type-Options" value="nosniff" />
        <add name="X-Frame-Options" value="DENY" />
        <add name="X-XSS-Protection" value="1; mode=block" />
        <add name="Referrer-Policy" value="strict-origin-when-cross-origin" />
        <add name="Content-Security-Policy" value="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';" />
      </customHeaders>
    </httpProtocol>
    
    <!-- Error pages -->
    <httpErrors errorMode="Custom" defaultResponseMode="ExecuteURL">
      <remove statusCode="404" subStatusCode="-1" />
      <error statusCode="404" responseMode="ExecuteURL" path="/index.html" />
    </httpErrors>
    
    <!-- Disable server signature -->
    <security>
      <requestFiltering>
        <hiddenSegments>
          <add segment="node_modules" />
          <add segment=".git" />
          <add segment=".env" />
        </hiddenSegments>
      </requestFiltering>
    </security>
    
  </system.webServer>
  
  <!-- System.web settings for .NET compatibility -->
  <system.web>
    <compilation debug="false" targetFramework="4.8" />
    <httpRuntime targetFramework="4.8" />
  </system.web>
  
</configuration>